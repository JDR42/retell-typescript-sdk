/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

/**
 * Internal Server Error
 */
export type DeletePhoneNumberResponse500ResponseBodyData = {
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;
  errorMessage?: string | undefined;
};

/**
 * Internal Server Error
 */
export class DeletePhoneNumberResponse500ResponseBody extends Error {
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;
  errorMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: DeletePhoneNumberResponse500ResponseBodyData;

  constructor(
    err: DeletePhoneNumberResponse500ResponseBodyData,
    options?: ErrorOptions,
  ) {
    super("", options);
    this.data$ = err;

    if (err.rawResponse != null) {
      this.rawResponse = err.rawResponse;
    }
    if (err.errorMessage != null) {
      this.errorMessage = err.errorMessage;
    }

    const msg =
      "message" in err && typeof err.message === "string" ? err.message : "";
    const { rawResponse, ...data } = err;
    const content = JSON.stringify(data);
    this.message = [msg, content].filter(Boolean).join("\n");

    this.name = "DeletePhoneNumberResponse500ResponseBody";
  }
}

/**
 * Unprocessable Content
 */
export type DeletePhoneNumberResponse422ResponseBodyData = {
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;
  errorMessage?: string | undefined;
};

/**
 * Unprocessable Content
 */
export class DeletePhoneNumberResponse422ResponseBody extends Error {
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;
  errorMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: DeletePhoneNumberResponse422ResponseBodyData;

  constructor(
    err: DeletePhoneNumberResponse422ResponseBodyData,
    options?: ErrorOptions,
  ) {
    super("", options);
    this.data$ = err;

    if (err.rawResponse != null) {
      this.rawResponse = err.rawResponse;
    }
    if (err.errorMessage != null) {
      this.errorMessage = err.errorMessage;
    }

    const msg =
      "message" in err && typeof err.message === "string" ? err.message : "";
    const { rawResponse, ...data } = err;
    const content = JSON.stringify(data);
    this.message = [msg, content].filter(Boolean).join("\n");

    this.name = "DeletePhoneNumberResponse422ResponseBody";
  }
}

/**
 * Unauthorized
 */
export type DeletePhoneNumberResponseResponseBodyData = {
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;
  errorMessage?: string | undefined;
};

/**
 * Unauthorized
 */
export class DeletePhoneNumberResponseResponseBody extends Error {
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;
  errorMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: DeletePhoneNumberResponseResponseBodyData;

  constructor(
    err: DeletePhoneNumberResponseResponseBodyData,
    options?: ErrorOptions,
  ) {
    super("", options);
    this.data$ = err;

    if (err.rawResponse != null) {
      this.rawResponse = err.rawResponse;
    }
    if (err.errorMessage != null) {
      this.errorMessage = err.errorMessage;
    }

    const msg =
      "message" in err && typeof err.message === "string" ? err.message : "";
    const { rawResponse, ...data } = err;
    const content = JSON.stringify(data);
    this.message = [msg, content].filter(Boolean).join("\n");

    this.name = "DeletePhoneNumberResponseResponseBody";
  }
}

/**
 * Bad Request
 */
export type DeletePhoneNumberResponseBodyData = {
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;
  errorMessage?: string | undefined;
};

/**
 * Bad Request
 */
export class DeletePhoneNumberResponseBody extends Error {
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse?: Response | undefined;
  errorMessage?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: DeletePhoneNumberResponseBodyData;

  constructor(err: DeletePhoneNumberResponseBodyData, options?: ErrorOptions) {
    super("", options);
    this.data$ = err;

    if (err.rawResponse != null) {
      this.rawResponse = err.rawResponse;
    }
    if (err.errorMessage != null) {
      this.errorMessage = err.errorMessage;
    }

    const msg =
      "message" in err && typeof err.message === "string" ? err.message : "";
    const { rawResponse, ...data } = err;
    const content = JSON.stringify(data);
    this.message = [msg, content].filter(Boolean).join("\n");

    this.name = "DeletePhoneNumberResponseBody";
  }
}

/** @internal */
export namespace DeletePhoneNumberResponse500ResponseBody$ {
  export type Inbound = {
    RawResponse?: Response | undefined;
    error_message?: string | undefined;
  };

  export const inboundSchema: z.ZodType<
    DeletePhoneNumberResponse500ResponseBody,
    z.ZodTypeDef,
    Inbound
  > = z
    .object({
      RawResponse: z.instanceof(Response).optional(),
      error_message: z.string().optional(),
    })
    .transform((v) => {
      return new DeletePhoneNumberResponse500ResponseBody({
        ...(v.RawResponse === undefined
          ? null
          : { rawResponse: v.RawResponse }),
        ...(v.error_message === undefined
          ? null
          : { errorMessage: v.error_message }),
      });
    });
  export type Outbound = {
    RawResponse?: never | undefined;
    error_message?: string | undefined;
  };

  export const outboundSchema: z.ZodType<
    Outbound,
    z.ZodTypeDef,
    DeletePhoneNumberResponse500ResponseBody
  > = z
    .instanceof(DeletePhoneNumberResponse500ResponseBody)
    .transform((v) => v.data$)
    .pipe(
      z
        .object({
          rawResponse: z
            .instanceof(Response)
            .transform(() => {
              throw new Error("Response cannot be serialized");
            })
            .optional(),
          errorMessage: z.string().optional(),
        })
        .transform((v) => {
          return {
            ...(v.rawResponse === undefined
              ? null
              : { RawResponse: v.rawResponse }),
            ...(v.errorMessage === undefined
              ? null
              : { error_message: v.errorMessage }),
          };
        }),
    );
}

/** @internal */
export namespace DeletePhoneNumberResponse422ResponseBody$ {
  export type Inbound = {
    RawResponse?: Response | undefined;
    error_message?: string | undefined;
  };

  export const inboundSchema: z.ZodType<
    DeletePhoneNumberResponse422ResponseBody,
    z.ZodTypeDef,
    Inbound
  > = z
    .object({
      RawResponse: z.instanceof(Response).optional(),
      error_message: z.string().optional(),
    })
    .transform((v) => {
      return new DeletePhoneNumberResponse422ResponseBody({
        ...(v.RawResponse === undefined
          ? null
          : { rawResponse: v.RawResponse }),
        ...(v.error_message === undefined
          ? null
          : { errorMessage: v.error_message }),
      });
    });
  export type Outbound = {
    RawResponse?: never | undefined;
    error_message?: string | undefined;
  };

  export const outboundSchema: z.ZodType<
    Outbound,
    z.ZodTypeDef,
    DeletePhoneNumberResponse422ResponseBody
  > = z
    .instanceof(DeletePhoneNumberResponse422ResponseBody)
    .transform((v) => v.data$)
    .pipe(
      z
        .object({
          rawResponse: z
            .instanceof(Response)
            .transform(() => {
              throw new Error("Response cannot be serialized");
            })
            .optional(),
          errorMessage: z.string().optional(),
        })
        .transform((v) => {
          return {
            ...(v.rawResponse === undefined
              ? null
              : { RawResponse: v.rawResponse }),
            ...(v.errorMessage === undefined
              ? null
              : { error_message: v.errorMessage }),
          };
        }),
    );
}

/** @internal */
export namespace DeletePhoneNumberResponseResponseBody$ {
  export type Inbound = {
    RawResponse?: Response | undefined;
    error_message?: string | undefined;
  };

  export const inboundSchema: z.ZodType<
    DeletePhoneNumberResponseResponseBody,
    z.ZodTypeDef,
    Inbound
  > = z
    .object({
      RawResponse: z.instanceof(Response).optional(),
      error_message: z.string().optional(),
    })
    .transform((v) => {
      return new DeletePhoneNumberResponseResponseBody({
        ...(v.RawResponse === undefined
          ? null
          : { rawResponse: v.RawResponse }),
        ...(v.error_message === undefined
          ? null
          : { errorMessage: v.error_message }),
      });
    });
  export type Outbound = {
    RawResponse?: never | undefined;
    error_message?: string | undefined;
  };

  export const outboundSchema: z.ZodType<
    Outbound,
    z.ZodTypeDef,
    DeletePhoneNumberResponseResponseBody
  > = z
    .instanceof(DeletePhoneNumberResponseResponseBody)
    .transform((v) => v.data$)
    .pipe(
      z
        .object({
          rawResponse: z
            .instanceof(Response)
            .transform(() => {
              throw new Error("Response cannot be serialized");
            })
            .optional(),
          errorMessage: z.string().optional(),
        })
        .transform((v) => {
          return {
            ...(v.rawResponse === undefined
              ? null
              : { RawResponse: v.rawResponse }),
            ...(v.errorMessage === undefined
              ? null
              : { error_message: v.errorMessage }),
          };
        }),
    );
}

/** @internal */
export namespace DeletePhoneNumberResponseBody$ {
  export type Inbound = {
    RawResponse?: Response | undefined;
    error_message?: string | undefined;
  };

  export const inboundSchema: z.ZodType<
    DeletePhoneNumberResponseBody,
    z.ZodTypeDef,
    Inbound
  > = z
    .object({
      RawResponse: z.instanceof(Response).optional(),
      error_message: z.string().optional(),
    })
    .transform((v) => {
      return new DeletePhoneNumberResponseBody({
        ...(v.RawResponse === undefined
          ? null
          : { rawResponse: v.RawResponse }),
        ...(v.error_message === undefined
          ? null
          : { errorMessage: v.error_message }),
      });
    });
  export type Outbound = {
    RawResponse?: never | undefined;
    error_message?: string | undefined;
  };

  export const outboundSchema: z.ZodType<
    Outbound,
    z.ZodTypeDef,
    DeletePhoneNumberResponseBody
  > = z
    .instanceof(DeletePhoneNumberResponseBody)
    .transform((v) => v.data$)
    .pipe(
      z
        .object({
          rawResponse: z
            .instanceof(Response)
            .transform(() => {
              throw new Error("Response cannot be serialized");
            })
            .optional(),
          errorMessage: z.string().optional(),
        })
        .transform((v) => {
          return {
            ...(v.rawResponse === undefined
              ? null
              : { RawResponse: v.rawResponse }),
            ...(v.errorMessage === undefined
              ? null
              : { error_message: v.errorMessage }),
          };
        }),
    );
}
