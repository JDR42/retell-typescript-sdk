/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type Agent = {
  /**
   * Unique id of agent.
   */
  agentId: string;
  /**
   * The name of the agent. Only used for your own reference.
   */
  agentName?: string | undefined;
  /*
   * The URL we will establish LLM websocket for getting response, usually your server.
   */
  llmWebsocketUrl: string;
  /**
   * Unique voice id used for the agent. Find list of available voices in documentation.
   */
  voiceId: string;
  /**
   * Last modification timestamp (milliseconds since epoch). Either the time of last update or creation if no updates available.
   */
  lastModificationTimestamp: number;
  /**
   * Controls whether the agent would backchannel (agent interjects the speaker with phrases like "yeah", "uh-huh" to signify interest and engagement).
   */
  enableBackchannel?: boolean | undefined;
  /**
   * Controls how stable the voice is.
   */
  voiceTemperature?: number | undefined;
};

/** @internal */
export namespace Agent$ {
  export type Inbound = {
    agent_id: string;
    agent_name?: string | undefined;
    llm_websocket_url: string;
    voice_id: string;
    last_modification_timestamp: number;
    enable_backchannel?: boolean | undefined;
    voice_temperature?: number | undefined;
  };

  export const inboundSchema: z.ZodType<Agent, z.ZodTypeDef, Inbound> = z
    .object({
      agent_id: z.string(),
      agent_name: z.string().optional(),
      llm_websocket_url: z.string(),
      voice_id: z.string(),
      last_modification_timestamp: z.number().int(),
      enable_backchannel: z.boolean().optional(),
      voice_temperature: z.number().optional()
    })
    .transform((v) => {
      return {
        agentId: v.agent_id,
        ...(v.agent_name === undefined ? null : { agentName: v.agent_name }),
        llmWebsocketUrl: v.llm_websocket_url,
        voiceId: v.voice_id,
        lastModificationTimestamp: v.last_modification_timestamp,
        ...(v.enable_backchannel === undefined ? null : { enableBackchannel: v.enable_backchannel }),
        ...(v.voice_temperature === undefined ? null : { voiceTemperature: v.voice_temperature }),
      };
    });

  export type Outbound = {
    agent_id: string;
    agent_name?: string | undefined;
    llm_websocket_url: string;
    voice_id: string;
    last_modification_timestamp: number;
    enable_backchannel?: boolean | undefined;
    voice_temperature?: number | undefined;
  };

  export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Agent> = z
    .object({
      agentId: z.string(),
      agentName: z.string().optional(),
      llmWebsocketUrl: z.string(),
      voiceId: z.string(),
      lastModificationTimestamp: z.number().int(),
      enableBackchannel: z.boolean().optional(),
      voiceTemperature: z.number().optional()
    })
    .transform((v) => {
      return {
        agent_id: v.agentId,
        ...(v.agentName === undefined ? null : { agent_name: v.agentName }),
        llm_websocket_url: v.llmWebsocketUrl,
        voice_id: v.voiceId,
        last_modification_timestamp: v.lastModificationTimestamp,
        ...(v.enableBackchannel === undefined ? null : { enable_backchannel: v.enableBackchannel }),
        ...(v.voiceTemperature === undefined ? null : { voice_temperature: v.voiceTemperature }),
      };
    });
}
