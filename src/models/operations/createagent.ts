/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../internal/utils";
import * as components from "../components";
import { AxiosResponse } from "axios";
import { Expose } from "class-transformer";

export class CreateAgentRequestBody extends SpeakeasyBase {
  /**
   * The name of the agent. Only used for your own reference.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "agent_name" })
  agentName?: string;

  /**
   * Pre-defined message for agent to say in the begining of call. Only used when `enable_begin_message` is true. When empty, agent would wait for user to talk first.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "begin_message" })
  beginMessage?: string;

  /**
   * Whether the agent begins the call with a pre-defined message. When this is false, the agent will still start the call, but with a dynamic message. If you wish for user to be the first to talk, set this to true and set `begin_message` as empty string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enable_begin_message" })
  enableBeginMessage?: boolean;

  /**
   * Whether the agent can end a call. If false, the agent would never end a call.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enable_end_call" })
  enableEndCall?: boolean;

  /**
   * Whether the agent attempts to end the call with a pre-defined message. When this is false, the agent might still be the last one speaking in the call, but the massage can be dynamic.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "enable_end_message" })
  enableEndMessage?: boolean;

  /**
   * Pre-defined message for agent to say when agent ends the call. Only used when `enable_end_call` and `enable_end_message` is true. If you wish for agent to hang up without saying anything, set this to empty string.
   */
  @SpeakeasyMetadata()
  @Expose({ name: "end_message" })
  endMessage?: string;

  /**
   * The prompt agent will follow. Check out [Prompt Best Practices](/features/agent-prompt-guide). Can use `${YOUR_PARAM_NAME}` to represent dynamic data that would get injected at each call. Learn more about [Agent Prompt Parameters](/features/agent-prompt-parameter).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "prompt" })
  prompt: string;

  /**
   * Unique voice id used for the agent. Find list of available voices and their characteristics in [Voices](/features/voices).
   */
  @SpeakeasyMetadata()
  @Expose({ name: "voice_id" })
  voiceId: string;
}

export class CreateAgentResponse extends SpeakeasyBase {
  /**
   * Successfully created a new agent.
   */
  @SpeakeasyMetadata()
  agent?: components.Agent;

  /**
   * HTTP response content type for this operation
   */
  @SpeakeasyMetadata()
  contentType: string;

  /**
   * HTTP response status code for this operation
   */
  @SpeakeasyMetadata()
  statusCode: number;

  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  @SpeakeasyMetadata()
  rawResponse: AxiosResponse;
}
