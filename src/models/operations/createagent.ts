/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type CreateAgentRequestBody = {
  /**
   * The name of the agent. Only used for your own reference.
   */
  agentName?: string | undefined;
  /*
   * The URL we will establish LLM websocket for getting response, usually your server.
   */
  llmWebsocketUrl: string;
  /**
   * Unique voice id used for the agent. Find list of available voices in documentation.
   */
  voiceId: string;
};

export type CreateAgentResponse = {
  /**
   * Successfully created a new agent.
   */
  agent?: components.Agent | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export namespace CreateAgentRequestBody$ {
  export type Inbound = {
    agent_name?: string | undefined;
    llm_websocket_url: string;
    voice_id: string;
  };

  export const inboundSchema: z.ZodType<
    CreateAgentRequestBody,
    z.ZodTypeDef,
    Inbound
  > = z
    .object({
      agent_name: z.string().optional(),
      llm_websocket_url: z.string(),
      voice_id: z.string(),
    })
    .transform((v) => {
      return {
        ...(v.agent_name === undefined ? null : { agentName: v.agent_name }),
        llmWebsocketUrl: v.llm_websocket_url,
        voiceId: v.voice_id,
      };
    });

  export type Outbound = {
    agent_name?: string | undefined;
    llm_websocket_url: string;
    voice_id: string;
  };

  export const outboundSchema: z.ZodType<
    Outbound,
    z.ZodTypeDef,
    CreateAgentRequestBody
  > = z
    .object({
      agentName: z.string().optional(),
      llmWebsocketUrl: z.string(),
      voiceId: z.string(),
    })
    .transform((v) => {
      return {
        ...(v.agentName === undefined ? null : { agent_name: v.agentName }),
        llm_websocket_url: v.llmWebsocketUrl,
        voice_id: v.voiceId,
      };
    });
}

/** @internal */
export namespace CreateAgentResponse$ {
  export type Inbound = {
    Agent?: components.Agent$.Inbound | undefined;
    ContentType: string;
    StatusCode: number;
    RawResponse: Response;
  };

  export const inboundSchema: z.ZodType<
    CreateAgentResponse,
    z.ZodTypeDef,
    Inbound
  > = z
    .object({
      Agent: components.Agent$.inboundSchema.optional(),
      ContentType: z.string(),
      StatusCode: z.number().int(),
      RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
      return {
        ...(v.Agent === undefined ? null : { agent: v.Agent }),
        contentType: v.ContentType,
        statusCode: v.StatusCode,
        rawResponse: v.RawResponse,
      };
    });

  export type Outbound = {
    Agent?: components.Agent$.Outbound | undefined;
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
  };

  export const outboundSchema: z.ZodType<
    Outbound,
    z.ZodTypeDef,
    CreateAgentResponse
  > = z
    .object({
      agent: components.Agent$.outboundSchema.optional(),
      contentType: z.string(),
      statusCode: z.number().int(),
      rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }),
    })
    .transform((v) => {
      return {
        ...(v.agent === undefined ? null : { Agent: v.agent }),
        ContentType: v.contentType,
        StatusCode: v.statusCode,
        RawResponse: v.rawResponse,
      };
    });
}
