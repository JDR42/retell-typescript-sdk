/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";

export type GetPhoneNumberRequest = {
  /**
   * Phone number in E.164 format to retreive more information.
   */
  phoneNumber: string;
};

export type GetPhoneNumberResponse = {
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * Successfully retrieved a phone number.
   */
  phoneNumber?: components.PhoneNumber | undefined;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export namespace GetPhoneNumberRequest$ {
  export type Inbound = {
    phone_number: string;
  };

  export const inboundSchema: z.ZodType<
    GetPhoneNumberRequest,
    z.ZodTypeDef,
    Inbound
  > = z
    .object({
      phone_number: z.string(),
    })
    .transform((v) => {
      return {
        phoneNumber: v.phone_number,
      };
    });

  export type Outbound = {
    phone_number: string;
  };

  export const outboundSchema: z.ZodType<
    Outbound,
    z.ZodTypeDef,
    GetPhoneNumberRequest
  > = z
    .object({
      phoneNumber: z.string(),
    })
    .transform((v) => {
      return {
        phone_number: v.phoneNumber,
      };
    });
}

/** @internal */
export namespace GetPhoneNumberResponse$ {
  export type Inbound = {
    ContentType: string;
    PhoneNumber?: components.PhoneNumber$.Inbound | undefined;
    StatusCode: number;
    RawResponse: Response;
  };

  export const inboundSchema: z.ZodType<
    GetPhoneNumberResponse,
    z.ZodTypeDef,
    Inbound
  > = z
    .object({
      ContentType: z.string(),
      PhoneNumber: components.PhoneNumber$.inboundSchema.optional(),
      StatusCode: z.number().int(),
      RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
      return {
        contentType: v.ContentType,
        ...(v.PhoneNumber === undefined
          ? null
          : { phoneNumber: v.PhoneNumber }),
        statusCode: v.StatusCode,
        rawResponse: v.RawResponse,
      };
    });

  export type Outbound = {
    ContentType: string;
    PhoneNumber?: components.PhoneNumber$.Outbound | undefined;
    StatusCode: number;
    RawResponse: never;
  };

  export const outboundSchema: z.ZodType<
    Outbound,
    z.ZodTypeDef,
    GetPhoneNumberResponse
  > = z
    .object({
      contentType: z.string(),
      phoneNumber: components.PhoneNumber$.outboundSchema.optional(),
      statusCode: z.number().int(),
      rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }),
    })
    .transform((v) => {
      return {
        ContentType: v.contentType,
        ...(v.phoneNumber === undefined
          ? null
          : { PhoneNumber: v.phoneNumber }),
        StatusCode: v.statusCode,
        RawResponse: v.rawResponse,
      };
    });
}
