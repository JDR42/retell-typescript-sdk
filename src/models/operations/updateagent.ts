/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../../models/components";
import { z } from "zod";
import { Language } from "../../models/components";

export type UpdateAgentRequestBody = {
  /**
   * The name of the agent. Only used for your own reference.
   */
  agentName?: string | undefined;
  /*
   * The URL we will establish LLM websocket for getting response, usually your server.
   */
  llmWebsocketUrl?: string | undefined;
  /**
   * Unique voice id used for the agent. Find list of available voices in documentation.
   */
  voiceId?: string | undefined;
  /**
   * Controls whether the agent would backchannel (agent interjects the speaker with phrases like "yeah", "uh-huh" to signify interest and engagement).
   */
  enableBackchannel?: boolean | undefined;
  /**
    * Controls how stable the voice is.
    */
  voiceTemperature?: number | undefined;
  /**
  * Controls speed of voice. Value ranging from [0.5,2]. Lower value means slower speech, while higher value means faster speech rate. If unset, default value 1 will apply.
  */
  voiceSpeed?: number | undefined;
  /**
  * Controls how responsive is the agent. Value ranging from [0,1]. Lower value means less responsive agent (wait more, respond slower), while higher value means faster exchanges (respond when it can). If unset, default value 1 will apply.
  */
  responsiveness?: number | undefined;
  /**
  * If set, will add ambient environment sound to the call to make experience more realistic.
  */
  ambientSound?: 'coffee-shop' | 'convention-hall' | 'summer-outdoor' | 'mountain-outdoor' | 'null' | undefined;
  /**
  * The webhook for agent to listen to call events. See what events it would get at webhook doc. If set, will binds webhook events for this agent to the specified url, and will ignore the account level webhook for this agent. Set to string null to remove webhook url from this agent.
  */
  webhookUrl?: string | undefined;
  /**
  * Provide a customized list of keywords to expand our models' vocabulary, aimed at improving performance and understanding within your specific context.
  */
  boostedKeywords?: string[] | undefined;
  /**
  * Disable transcripts and recordings storage for enhanced privacy. Access transcripts securely via webhooks 
  */
  activateHipaaCompliance?: boolean | undefined;
  /**
  *  Whether to format the text with inverse text normalization. It
            transforms the spoken form of text into written form for entities
            like phone number, email address, street address, etc. For example,
            "february fourth twenty twenty two" can be converted into "february
            4th 2022". If not set, the default is true.
  */
  formatText?: boolean | undefined;
  /**
* `Beta feature, use with caution.`\n\n Language that agent operates
          in. This would decide the language agent transcribes audio to
          (locale / dialect considered), and synthesize audio into (only the
          base language tag is considered, for a specific accent, you need to
          listen to the voice and choose one). If not set, default to en-US
          (American English). Currently not all voice providers support all
          the languages listed here. \n\n- `11lab voices`: supports English,
          German, Spanish, Hindi, Portuguese \n\n- `openAI voices`: supports
          English, German, Spanish, Hindi, Portuguese, Japanese \n\n-
          `deepgram voices`: supports English 
*/
  language?: Language | undefined;
};

/** @internal */
export namespace UpdateAgentRequestBody$ {
  export type Inbound = {
    agent_name?: string | undefined;
    llm_websocket_url?: string | undefined;
    voice_id?: string | undefined;
    enable_backchannel?: boolean | undefined;
    voice_temperature?: number | undefined;
    voice_speed?: number | undefined;
    responsiveness?: number | undefined;
    ambient_sound?: 'coffee-shop' | 'convention-hall' | 'summer-outdoor' | 'mountain-outdoor' | 'null' | undefined;
    webhook_url?: string | undefined;
    boosted_keywords?: string[] | undefined;
    activate_hipaa_compliance?: boolean | undefined;
    format_text?: boolean | undefined;
    language?: Language | undefined;
  };

  export const inboundSchema: z.ZodType<
    UpdateAgentRequestBody,
    z.ZodTypeDef,
    Inbound
  > = z
    .object({
      agent_name: z.string().optional(),
      llm_websocket_url: z.string(),
      voice_id: z.string(),
      enable_backchannel: z.boolean().optional(),
      voice_temperature: z.number().optional(),
      voice_speed: z.number().optional(),
      responsiveness: z.number().optional(),
      ambient_sound: z.enum(['coffee-shop', 'convention-hall', 'summer-outdoor', 'mountain-outdoor', 'null']).optional(),
      webhook_url: z.string().optional(),
      boosted_keywords: z.array(z.string()).optional(),
      activate_hipaa_compliance: z.boolean().optional(),
      format_text: z.boolean().optional(),
      language: z.nativeEnum(Language).optional(),
    })
    .transform((v) => {
      return {
        ...(v.agent_name === undefined ? null : { agentName: v.agent_name }),
        ...(v.llm_websocket_url === undefined
          ? null
          : { llmWebsocketUrl: v.llm_websocket_url }),
        ...(v.voice_id === undefined ? null : { voiceId: v.voice_id }),
        ...(v.enable_backchannel === undefined ? null : { enableBackchannel: v.enable_backchannel }),
        ...(v.voice_temperature === undefined ? null : { voiceTemperature: v.voice_temperature }),
        ...(v.voice_temperature === undefined ? null : { voiceTemperature: v.voice_temperature }),
        ...(v.voice_speed === undefined ? null : { voiceSpeed: v.voice_speed }),
        ...(v.responsiveness === undefined ? null : { responsiveness: v.responsiveness }),
        ...(v.ambient_sound === undefined ? null : { ambientSound: v.ambient_sound }),
        ...(v.webhook_url === undefined ? null : { webhookUrl: v.webhook_url }),
        ...(v.boosted_keywords === undefined ? null : { boostedKeywords: v.boosted_keywords }),
        ...(v.activate_hipaa_compliance === undefined ? null : { activateHipaaCompliance: v.activate_hipaa_compliance }),
        ...(v.format_text === undefined ? null : { formatText: v.format_text }),
        ...(v.language === undefined ? null : { language: v.language }),
      };
    });

  export type Outbound = {
    agent_name?: string | undefined;
    llm_websocket_url?: string | undefined;
    voice_id?: string | undefined;
    enable_backchannel?: boolean | undefined;
    voice_temperature?: number | undefined;
    voice_speed?: number | undefined;
    responsiveness?: number | undefined;
    ambient_sound?: 'coffee-shop' | 'convention-hall' | 'summer-outdoor' | 'mountain-outdoor' | 'null' | undefined;
    webhook_url?: string | undefined;
    boosted_keywords?: string[] | undefined;
    activate_hipaa_compliance?: boolean | undefined;
    format_text?: boolean | undefined;
    language?: Language | undefined;
  };

  export const outboundSchema: z.ZodType<
    Outbound,
    z.ZodTypeDef,
    UpdateAgentRequestBody
  > = z
    .object({
      agentName: z.string().optional(),
      llmWebsocketUrl: z.string().optional(),
      voiceId: z.string().optional(),
      enableBackchannel: z.boolean().optional(),
      voiceTemperature: z.number().optional(),
      voiceSpeed: z.number().optional(),
      responsiveness: z.number().optional(),
      ambientSound: z.enum(['coffee-shop', 'convention-hall', 'summer-outdoor', 'mountain-outdoor', 'null']).optional(),
      webhookUrl: z.string().optional(),
      boostedKeywords: z.array(z.string()).optional(),
      activateHipaaCompliance: z.boolean().optional(),
      formatText: z.boolean().optional(),
      language: z.nativeEnum(Language).optional(),
    })
    .transform((v) => {
      return {
        ...(v.agentName === undefined ? null : { agent_name: v.agentName }),
        ...(v.llmWebsocketUrl === undefined
          ? null
          : { llm_websocket_url: v.llmWebsocketUrl }),
        ...(v.voiceId === undefined ? null : { voice_id: v.voiceId }),
        ...(v.enableBackchannel === undefined ? null : { enable_backchannel: v.enableBackchannel }),
        ...(v.voiceTemperature === undefined ? null : { voice_temperature: v.voiceTemperature }),
        ...(v.voiceSpeed === undefined ? null : { voice_speed: v.voiceSpeed }),
        ...(v.responsiveness === undefined ? null : { responsiveness: v.responsiveness }),
        ...(v.ambientSound === undefined ? null : { ambient_sound: v.ambientSound }),
        ...(v.webhookUrl === undefined ? null : { webhook_url: v.webhookUrl }),
        ...(v.boostedKeywords === undefined ? null : { boosted_keywords: v.boostedKeywords }),
        ...(v.activateHipaaCompliance === undefined ? null : { activate_hipaa_compliance: v.activateHipaaCompliance }),
        ...(v.formatText === undefined ? null : { format_text: v.formatText }),
        ...(v.language === undefined ? null : { language: v.language }),
      };
    });
}

export type UpdateAgentRequest = {
  requestBody: UpdateAgentRequestBody;
  /**
   * Unique id of the agent to be updated.
   */
  agentId: string;
};

export type UpdateAgentResponse = {
  /**
   * Successfully updated an agent.
   */
  agent?: components.Agent | undefined;
  /**
   * HTTP response content type for this operation
   */
  contentType: string;
  /**
   * HTTP response status code for this operation
   */
  statusCode: number;
  /**
   * Raw HTTP response; suitable for custom response parsing
   */
  rawResponse: Response;
};

/** @internal */
export namespace UpdateAgentRequest$ {
  export type Inbound = {
    RequestBody: UpdateAgentRequestBody$.Inbound;
    agent_id: string;
  };

  export const inboundSchema: z.ZodType<
    UpdateAgentRequest,
    z.ZodTypeDef,
    Inbound
  > = z
    .object({
      RequestBody: UpdateAgentRequestBody$.inboundSchema,
      agent_id: z.string(),
    })
    .transform((v) => {
      return {
        requestBody: v.RequestBody,
        agentId: v.agent_id,
      };
    });

  export type Outbound = {
    RequestBody: UpdateAgentRequestBody$.Outbound;
    agent_id: string;
  };

  export const outboundSchema: z.ZodType<
    Outbound,
    z.ZodTypeDef,
    UpdateAgentRequest
  > = z
    .object({
      requestBody: UpdateAgentRequestBody$.outboundSchema,
      agentId: z.string(),
    })
    .transform((v) => {
      return {
        RequestBody: v.requestBody,
        agent_id: v.agentId,
      };
    });
}

/** @internal */
export namespace UpdateAgentResponse$ {
  export type Inbound = {
    Agent?: components.Agent$.Inbound | undefined;
    ContentType: string;
    StatusCode: number;
    RawResponse: Response;
  };

  export const inboundSchema: z.ZodType<
    UpdateAgentResponse,
    z.ZodTypeDef,
    Inbound
  > = z
    .object({
      Agent: components.Agent$.inboundSchema.optional(),
      ContentType: z.string(),
      StatusCode: z.number().int(),
      RawResponse: z.instanceof(Response),
    })
    .transform((v) => {
      return {
        ...(v.Agent === undefined ? null : { agent: v.Agent }),
        contentType: v.ContentType,
        statusCode: v.StatusCode,
        rawResponse: v.RawResponse,
      };
    });

  export type Outbound = {
    Agent?: components.Agent$.Outbound | undefined;
    ContentType: string;
    StatusCode: number;
    RawResponse: never;
  };

  export const outboundSchema: z.ZodType<
    Outbound,
    z.ZodTypeDef,
    UpdateAgentResponse
  > = z
    .object({
      agent: components.Agent$.outboundSchema.optional(),
      contentType: z.string(),
      statusCode: z.number().int(),
      rawResponse: z.instanceof(Response).transform(() => {
        throw new Error("Response cannot be serialized");
      }),
    })
    .transform((v) => {
      return {
        ...(v.agent === undefined ? null : { Agent: v.agent }),
        ContentType: v.contentType,
        StatusCode: v.statusCode,
        RawResponse: v.rawResponse,
      };
    });
}
