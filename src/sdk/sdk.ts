/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as errors from "../models/errors";
import * as operations from "../models/operations";

export class RetellClient extends ClientSDK {
  private readonly options$: SDKOptions;

  constructor(options: SDKOptions = {}) {
    super({
      client: options.httpClient || new HTTPClient(),
      baseURL: serverURLFromOptions(options),
    });

    this.options$ = options;
    void this.options$;
  }

  /**
   * Create a new agent
   */
  async createAgent(
    input: operations.CreateAgentRequestBody,
    options?: RequestOptions,
  ): Promise<operations.CreateAgentResponse> {
    const headers$ = new Headers();
    headers$.set("user-agent", SDK_METADATA.userAgent);
    headers$.set("Content-Type", "application/json");
    headers$.set("Accept", "application/json");

    const payload$ =
      operations.CreateAgentRequestBody$.outboundSchema.parse(input);
    const body$ = enc$.encodeJSON("body", payload$, { explode: true });

    const path$ = this.templateURLComponent("/create-agent")();

    let security$;
    if (typeof this.options$.apiKey === "function") {
      security$ = { apiKey: await this.options$.apiKey() };
    } else if (this.options$.apiKey) {
      security$ = { apiKey: this.options$.apiKey };
    } else {
      security$ = {};
    }
    const securitySettings$ = this.resolveGlobalSecurity(security$);

    const response = await this.fetch$(
      {
        security: securitySettings$,
        method: "post",
        path: path$,
        headers: headers$,
        body: body$,
      },
      options,
    );

    const responseFields$ = {
      ContentType:
        response.headers.get("content-type") ?? "application/octet-stream",
      StatusCode: response.status,
      RawResponse: response,
    };

    if (this.matchResponse(response, 201, "application/json")) {
      const responseBody = await response.json();
      const result = operations.CreateAgentResponse$.inboundSchema.parse({
        ...responseFields$,
        Agent: responseBody,
      });
      return result;
    } else if (this.matchResponse(response, 400, "application/json")) {
      const responseBody = await response.json();
      const result = errors.CreateAgentResponseBody$.inboundSchema.parse({
        ...responseFields$,
        ...responseBody,
      });
      throw result;
    } else if (this.matchResponse(response, 401, "application/json")) {
      const responseBody = await response.json();
      const result =
        errors.CreateAgentResponseResponseBody$.inboundSchema.parse({
          ...responseFields$,
          ...responseBody,
        });
      throw result;
    } else if (this.matchResponse(response, 422, "application/json")) {
      const responseBody = await response.json();
      const result =
        errors.CreateAgentResponse422ResponseBody$.inboundSchema.parse({
          ...responseFields$,
          ...responseBody,
        });
      throw result;
    } else if (this.matchResponse(response, 500, "application/json")) {
      const responseBody = await response.json();
      const result =
        errors.CreateAgentResponse500ResponseBody$.inboundSchema.parse({
          ...responseFields$,
          ...responseBody,
        });
      throw result;
    } else {
      const responseBody = await response.text();
      throw new errors.SDKError(
        "Unexpected API response",
        response,
        responseBody,
      );
    }
  }

  /**
   * Initiate an outbound phone call.
   */
  async registerCall(
    input: operations.RegisterCallRequestBody,
    options?: RequestOptions,
  ): Promise<operations.RegisterCallResponse> {
    const headers$ = new Headers();
    headers$.set("user-agent", SDK_METADATA.userAgent);
    headers$.set("Content-Type", "application/json");
    headers$.set("Accept", "application/json");

    const payload$ =
      operations.RegisterCallRequestBody$.outboundSchema.parse(input);
    const body$ = enc$.encodeJSON("body", payload$, { explode: true });

    const path$ = this.templateURLComponent("/register-call")();

    let security$;
    if (typeof this.options$.apiKey === "function") {
      security$ = { apiKey: await this.options$.apiKey() };
    } else if (this.options$.apiKey) {
      security$ = { apiKey: this.options$.apiKey };
    } else {
      security$ = {};
    }
    const securitySettings$ = this.resolveGlobalSecurity(security$);

    const response = await this.fetch$(
      {
        security: securitySettings$,
        method: "post",
        path: path$,
        headers: headers$,
        body: body$,
      },
      options,
    );

    const responseFields$ = {
      ContentType:
        response.headers.get("content-type") ?? "application/octet-stream",
      StatusCode: response.status,
      RawResponse: response,
    };

    if (this.matchResponse(response, 201, "application/json")) {
      const responseBody = await response.json();
      const result = operations.RegisterCallResponse$.inboundSchema.parse({
        ...responseFields$,
        CallDetail: responseBody,
      });
      return result;
    } else if (this.matchResponse(response, 400, "application/json")) {
      const responseBody = await response.json();
      const result = errors.RegisterCallResponseBody$.inboundSchema.parse({
        ...responseFields$,
        ...responseBody,
      });
      throw result;
    } else if (this.matchResponse(response, 401, "application/json")) {
      const responseBody = await response.json();
      const result =
        errors.RegisterCallResponseResponseBody$.inboundSchema.parse({
          ...responseFields$,
          ...responseBody,
        });
      throw result;
    } else if (this.matchResponse(response, 402, "application/json")) {
      const responseBody = await response.json();
      const result =
        errors.RegisterCallResponse402ResponseBody$.inboundSchema.parse({
          ...responseFields$,
          ...responseBody,
        });
      throw result;
    } else if (this.matchResponse(response, 422, "application/json")) {
      const responseBody = await response.json();
      const result =
        errors.RegisterCallResponse422ResponseBody$.inboundSchema.parse({
          ...responseFields$,
          ...responseBody,
        });
      throw result;
    } else if (this.matchResponse(response, 429, "application/json")) {
      const responseBody = await response.json();
      const result =
        errors.RegisterCallResponse429ResponseBody$.inboundSchema.parse({
          ...responseFields$,
          ...responseBody,
        });
      throw result;
    } else if (this.matchResponse(response, 500, "application/json")) {
      const responseBody = await response.json();
      const result =
        errors.RegisterCallResponse500ResponseBody$.inboundSchema.parse({
          ...responseFields$,
          ...responseBody,
        });
      throw result;
    } else {
      const responseBody = await response.text();
      throw new errors.SDKError(
        "Unexpected API response",
        response,
        responseBody,
      );
    }
  }

  /**
   * Delete an existing agent
   */
  async deleteAgent(
    agentId: string,
    options?: RequestOptions,
  ): Promise<operations.DeleteAgentResponse> {
    const input$: operations.DeleteAgentRequest = {
      agentId: agentId,
    };
    const headers$ = new Headers();
    headers$.set("user-agent", SDK_METADATA.userAgent);
    headers$.set("Accept", "application/json");

    const payload$ =
      operations.DeleteAgentRequest$.outboundSchema.parse(input$);
    const body$ = null;

    const pathParams$ = {
      agent_id: enc$.encodeSimple("agent_id", payload$.agent_id, {
        explode: false,
        charEncoding: "percent",
      }),
    };

    const path$ = this.templateURLComponent("/delete-agent/{agent_id}")(
      pathParams$,
    );

    let security$;
    if (typeof this.options$.apiKey === "function") {
      security$ = { apiKey: await this.options$.apiKey() };
    } else if (this.options$.apiKey) {
      security$ = { apiKey: this.options$.apiKey };
    } else {
      security$ = {};
    }
    const securitySettings$ = this.resolveGlobalSecurity(security$);

    const response = await this.fetch$(
      {
        security: securitySettings$,
        method: "delete",
        path: path$,
        headers: headers$,
        body: body$,
      },
      options,
    );

    const responseFields$ = {
      ContentType:
        response.headers.get("content-type") ?? "application/octet-stream",
      StatusCode: response.status,
      RawResponse: response,
    };

    if (this.matchStatusCode(response, 204)) {
      // fallthrough
    } else if (this.matchResponse(response, 400, "application/json")) {
      const responseBody = await response.json();
      const result = errors.DeleteAgentResponseBody$.inboundSchema.parse({
        ...responseFields$,
        ...responseBody,
      });
      throw result;
    } else if (this.matchResponse(response, 401, "application/json")) {
      const responseBody = await response.json();
      const result =
        errors.DeleteAgentResponseResponseBody$.inboundSchema.parse({
          ...responseFields$,
          ...responseBody,
        });
      throw result;
    } else if (this.matchResponse(response, 422, "application/json")) {
      const responseBody = await response.json();
      const result =
        errors.DeleteAgentResponse422ResponseBody$.inboundSchema.parse({
          ...responseFields$,
          ...responseBody,
        });
      throw result;
    } else if (this.matchResponse(response, 500, "application/json")) {
      const responseBody = await response.json();
      const result =
        errors.DeleteAgentResponse500ResponseBody$.inboundSchema.parse({
          ...responseFields$,
          ...responseBody,
        });
      throw result;
    } else {
      const responseBody = await response.text();
      throw new errors.SDKError(
        "Unexpected API response",
        response,
        responseBody,
      );
    }

    return operations.DeleteAgentResponse$.inboundSchema.parse(responseFields$);
  }

  /**
   * Retrieve details of a specific agent
   */
  async getAgent(
    agentId: string,
    options?: RequestOptions,
  ): Promise<operations.GetAgentResponse> {
    const input$: operations.GetAgentRequest = {
      agentId: agentId,
    };
    const headers$ = new Headers();
    headers$.set("user-agent", SDK_METADATA.userAgent);
    headers$.set("Accept", "application/json");

    const payload$ = operations.GetAgentRequest$.outboundSchema.parse(input$);
    const body$ = null;

    const pathParams$ = {
      agent_id: enc$.encodeSimple("agent_id", payload$.agent_id, {
        explode: false,
        charEncoding: "percent",
      }),
    };

    const path$ = this.templateURLComponent("/get-agent/{agent_id}")(
      pathParams$,
    );

    let security$;
    if (typeof this.options$.apiKey === "function") {
      security$ = { apiKey: await this.options$.apiKey() };
    } else if (this.options$.apiKey) {
      security$ = { apiKey: this.options$.apiKey };
    } else {
      security$ = {};
    }
    const securitySettings$ = this.resolveGlobalSecurity(security$);

    const response = await this.fetch$(
      {
        security: securitySettings$,
        method: "get",
        path: path$,
        headers: headers$,
        body: body$,
      },
      options,
    );

    const responseFields$ = {
      ContentType:
        response.headers.get("content-type") ?? "application/octet-stream",
      StatusCode: response.status,
      RawResponse: response,
    };

    if (this.matchResponse(response, 200, "application/json")) {
      const responseBody = await response.json();
      const result = operations.GetAgentResponse$.inboundSchema.parse({
        ...responseFields$,
        Agent: responseBody,
      });
      return result;
    } else if (this.matchResponse(response, 400, "application/json")) {
      const responseBody = await response.json();
      const result = errors.GetAgentResponseBody$.inboundSchema.parse({
        ...responseFields$,
        ...responseBody,
      });
      throw result;
    } else if (this.matchResponse(response, 401, "application/json")) {
      const responseBody = await response.json();
      const result = errors.GetAgentResponseResponseBody$.inboundSchema.parse({
        ...responseFields$,
        ...responseBody,
      });
      throw result;
    } else if (this.matchResponse(response, 422, "application/json")) {
      const responseBody = await response.json();
      const result =
        errors.GetAgentResponse422ResponseBody$.inboundSchema.parse({
          ...responseFields$,
          ...responseBody,
        });
      throw result;
    } else if (this.matchResponse(response, 500, "application/json")) {
      const responseBody = await response.json();
      const result =
        errors.GetAgentResponse500ResponseBody$.inboundSchema.parse({
          ...responseFields$,
          ...responseBody,
        });
      throw result;
    } else {
      const responseBody = await response.text();
      throw new errors.SDKError(
        "Unexpected API response",
        response,
        responseBody,
      );
    }
  }

  /**
   * Retrieve details of a specific call
   */
  async getCall(
    callId: string,
    options?: RequestOptions,
  ): Promise<operations.GetCallResponse> {
    const input$: operations.GetCallRequest = {
      callId: callId,
    };
    const headers$ = new Headers();
    headers$.set("user-agent", SDK_METADATA.userAgent);
    headers$.set("Accept", "application/json");

    const payload$ = operations.GetCallRequest$.outboundSchema.parse(input$);
    const body$ = null;

    const pathParams$ = {
      call_id: enc$.encodeSimple("call_id", payload$.call_id, {
        explode: false,
        charEncoding: "percent",
      }),
    };

    const path$ = this.templateURLComponent("/get-call/{call_id}")(pathParams$);

    let security$;
    if (typeof this.options$.apiKey === "function") {
      security$ = { apiKey: await this.options$.apiKey() };
    } else if (this.options$.apiKey) {
      security$ = { apiKey: this.options$.apiKey };
    } else {
      security$ = {};
    }
    const securitySettings$ = this.resolveGlobalSecurity(security$);

    const response = await this.fetch$(
      {
        security: securitySettings$,
        method: "get",
        path: path$,
        headers: headers$,
        body: body$,
      },
      options,
    );

    const responseFields$ = {
      ContentType:
        response.headers.get("content-type") ?? "application/octet-stream",
      StatusCode: response.status,
      RawResponse: response,
    };

    if (this.matchResponse(response, 200, "application/json")) {
      const responseBody = await response.json();
      const result = operations.GetCallResponse$.inboundSchema.parse({
        ...responseFields$,
        CallDetail: responseBody,
      });
      return result;
    } else if (this.matchResponse(response, 400, "application/json")) {
      const responseBody = await response.json();
      const result = errors.GetCallResponseBody$.inboundSchema.parse({
        ...responseFields$,
        ...responseBody,
      });
      throw result;
    } else if (this.matchResponse(response, 401, "application/json")) {
      const responseBody = await response.json();
      const result = errors.GetCallResponseResponseBody$.inboundSchema.parse({
        ...responseFields$,
        ...responseBody,
      });
      throw result;
    } else if (this.matchResponse(response, 422, "application/json")) {
      const responseBody = await response.json();
      const result = errors.GetCallResponse422ResponseBody$.inboundSchema.parse(
        {
          ...responseFields$,
          ...responseBody,
        },
      );
      throw result;
    } else if (this.matchResponse(response, 500, "application/json")) {
      const responseBody = await response.json();
      const result = errors.GetCallResponse500ResponseBody$.inboundSchema.parse(
        {
          ...responseFields$,
          ...responseBody,
        },
      );
      throw result;
    } else {
      const responseBody = await response.text();
      throw new errors.SDKError(
        "Unexpected API response",
        response,
        responseBody,
      );
    }
  }

  /**
   * List all agents
   */
  async listAgents(
    options?: RequestOptions,
  ): Promise<operations.ListAgentsResponse> {
    const headers$ = new Headers();
    headers$.set("user-agent", SDK_METADATA.userAgent);
    headers$.set("Accept", "application/json");

    const path$ = this.templateURLComponent("/list-agents")();

    let security$;
    if (typeof this.options$.apiKey === "function") {
      security$ = { apiKey: await this.options$.apiKey() };
    } else if (this.options$.apiKey) {
      security$ = { apiKey: this.options$.apiKey };
    } else {
      security$ = {};
    }
    const securitySettings$ = this.resolveGlobalSecurity(security$);

    const response = await this.fetch$(
      {
        security: securitySettings$,
        method: "get",
        path: path$,
        headers: headers$,
      },
      options,
    );

    const responseFields$ = {
      ContentType:
        response.headers.get("content-type") ?? "application/octet-stream",
      StatusCode: response.status,
      RawResponse: response,
    };

    if (this.matchResponse(response, 200, "application/json")) {
      const responseBody = await response.json();
      const result = operations.ListAgentsResponse$.inboundSchema.parse({
        ...responseFields$,
        agents: responseBody,
      });
      return result;
    } else if (this.matchResponse(response, 401, "application/json")) {
      const responseBody = await response.json();
      const result = errors.ListAgentsResponseBody$.inboundSchema.parse({
        ...responseFields$,
        ...responseBody,
      });
      throw result;
    } else if (this.matchResponse(response, 500, "application/json")) {
      const responseBody = await response.json();
      const result = errors.ListAgentsResponseResponseBody$.inboundSchema.parse(
        {
          ...responseFields$,
          ...responseBody,
        },
      );
      throw result;
    } else {
      const responseBody = await response.text();
      throw new errors.SDKError(
        "Unexpected API response",
        response,
        responseBody,
      );
    }
  }

  /**
   * Retrieve call details
   */
  async listCalls(
    filterCriteria?: operations.FilterCriteria | undefined,
    limit?: number | undefined,
    sortOrder?: operations.SortOrder | undefined,
    options?: RequestOptions,
  ): Promise<operations.ListCallsResponse> {
    const input$: operations.ListCallsRequest = {
      filterCriteria: filterCriteria,
      limit: limit,
      sortOrder: sortOrder,
    };
    const headers$ = new Headers();
    headers$.set("user-agent", SDK_METADATA.userAgent);
    headers$.set("Accept", "application/json");

    const payload$ = operations.ListCallsRequest$.outboundSchema.parse(input$);
    const body$ = null;

    const path$ = this.templateURLComponent("/list-calls")();

    const query$ = [
      enc$.encodeForm(
        "filter_criteria",
        JSON.stringify(payload$.filter_criteria),
        {
          explode: true,
          charEncoding: "percent",
        },
      ),
      enc$.encodeForm("limit", payload$.limit, {
        explode: true,
        charEncoding: "percent",
      }),
      enc$.encodeForm("sort_order", payload$.sort_order, {
        explode: true,
        charEncoding: "percent",
      }),
    ]
      .filter(Boolean)
      .join("&");

    let security$;
    if (typeof this.options$.apiKey === "function") {
      security$ = { apiKey: await this.options$.apiKey() };
    } else if (this.options$.apiKey) {
      security$ = { apiKey: this.options$.apiKey };
    } else {
      security$ = {};
    }
    const securitySettings$ = this.resolveGlobalSecurity(security$);

    const response = await this.fetch$(
      {
        security: securitySettings$,
        method: "get",
        path: path$,
        headers: headers$,
        query: query$,
        body: body$,
      },
      options,
    );

    const responseFields$ = {
      ContentType:
        response.headers.get("content-type") ?? "application/octet-stream",
      StatusCode: response.status,
      RawResponse: response,
    };

    if (this.matchResponse(response, 200, "application/json")) {
      const responseBody = await response.json();
      const result = operations.ListCallsResponse$.inboundSchema.parse({
        ...responseFields$,
        calls: responseBody,
      });
      return result;
    } else if (this.matchResponse(response, 400, "application/json")) {
      const responseBody = await response.json();
      const result = errors.ListCallsResponseBody$.inboundSchema.parse({
        ...responseFields$,
        ...responseBody,
      });
      throw result;
    } else if (this.matchResponse(response, 401, "application/json")) {
      const responseBody = await response.json();
      const result = errors.ListCallsResponseResponseBody$.inboundSchema.parse({
        ...responseFields$,
        ...responseBody,
      });
      throw result;
    } else if (this.matchResponse(response, 500, "application/json")) {
      const responseBody = await response.json();
      const result =
        errors.ListCallsResponse500ResponseBody$.inboundSchema.parse({
          ...responseFields$,
          ...responseBody,
        });
      throw result;
    } else {
      const responseBody = await response.text();
      throw new errors.SDKError(
        "Unexpected API response",
        response,
        responseBody,
      );
    }
  }

  /**
   * Update an existing agent
   */
  async updateAgent(
    requestBody: operations.UpdateAgentRequestBody,
    agentId: string,
    options?: RequestOptions,
  ): Promise<operations.UpdateAgentResponse> {
    const input$: operations.UpdateAgentRequest = {
      requestBody: requestBody,
      agentId: agentId,
    };
    const headers$ = new Headers();
    headers$.set("user-agent", SDK_METADATA.userAgent);
    headers$.set("Content-Type", "application/json");
    headers$.set("Accept", "application/json");

    const payload$ =
      operations.UpdateAgentRequest$.outboundSchema.parse(input$);

    const body$ = enc$.encodeJSON("body", payload$.RequestBody, {
      explode: true,
    });

    const pathParams$ = {
      agent_id: enc$.encodeSimple("agent_id", payload$.agent_id, {
        explode: false,
        charEncoding: "percent",
      }),
    };

    const path$ = this.templateURLComponent("/update-agent/{agent_id}")(
      pathParams$,
    );

    let security$;
    if (typeof this.options$.apiKey === "function") {
      security$ = { apiKey: await this.options$.apiKey() };
    } else if (this.options$.apiKey) {
      security$ = { apiKey: this.options$.apiKey };
    } else {
      security$ = {};
    }
    const securitySettings$ = this.resolveGlobalSecurity(security$);

    const response = await this.fetch$(
      {
        security: securitySettings$,
        method: "PATCH",
        path: path$,
        headers: headers$,
        body: body$,
      },
      options,
    );

    const responseFields$ = {
      ContentType:
        response.headers.get("content-type") ?? "application/octet-stream",
      StatusCode: response.status,
      RawResponse: response,
    };

    if (this.matchResponse(response, 200, "application/json")) {
      const responseBody = await response.json();
      const result = operations.UpdateAgentResponse$.inboundSchema.parse({
        ...responseFields$,
        Agent: responseBody,
      });
      return result;
    } else if (this.matchResponse(response, 400, "application/json")) {
      const responseBody = await response.json();
      const result = errors.UpdateAgentResponseBody$.inboundSchema.parse({
        ...responseFields$,
        ...responseBody,
      });
      throw result;
    } else if (this.matchResponse(response, 401, "application/json")) {
      const responseBody = await response.json();
      const result =
        errors.UpdateAgentResponseResponseBody$.inboundSchema.parse({
          ...responseFields$,
          ...responseBody,
        });
      throw result;
    } else if (this.matchResponse(response, 422, "application/json")) {
      const responseBody = await response.json();
      const result =
        errors.UpdateAgentResponse422ResponseBody$.inboundSchema.parse({
          ...responseFields$,
          ...responseBody,
        });
      throw result;
    } else if (this.matchResponse(response, 500, "application/json")) {
      const responseBody = await response.json();
      const result =
        errors.UpdateAgentResponse500ResponseBody$.inboundSchema.parse({
          ...responseFields$,
          ...responseBody,
        });
      throw result;
    } else {
      const responseBody = await response.text();
      throw new errors.SDKError(
        "Unexpected API response",
        response,
        responseBody,
      );
    }
  }
}
