/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as components from "../models/components";
import * as errors from "../models/errors";
import * as operations from "../models/operations";
import axios, { AxiosStatic } from "axios";
import {
  AxiosInstance,
  AxiosRequestConfig,
  AxiosResponse,
  RawAxiosRequestHeaders,
} from "axios";
import { EventEmitter } from "events";
/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  /**
   * The production server.
   */
  "https://api.re-tell.ai",
] as const;

/**
 * The available configuration options for the SDK
 */
export type SDKProps = {
  apiKey?: string;

  /**
   * Allows overriding the default axios client used by the SDK
   */
  defaultClient?: AxiosStatic;

  /**
   * Allows overriding the default server used by the SDK
   */
  serverIdx?: number;

  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string;
  /**
   * Allows overriding the default retry config used by the SDK
   */
  retryConfig?: utils.RetryConfig;
};

export class SDKConfiguration {
  defaultClient: AxiosStatic;
  security?: components.Security | (() => Promise<components.Security>);
  serverURL: string;
  serverDefaults: any;
  language = "typescript";
  openapiDocVersion = "1.0.0";
  sdkVersion = "1.15.9";
  genVersion = "2.207.1";
  retryConfig?: utils.RetryConfig;
  public constructor(init?: Partial<SDKConfiguration>) {
    Object.assign(this, init);
  }
}

interface PromptParam {
  name: string;
  value: string;
}

export class LiveClient extends EventEmitter {
  public ws: WebSocket;

  constructor(
    apiKey: string,
    agentId: string,
    sampleRate: number,
    agentPromptParams: PromptParam[],
    baseEndpoint: string
  ) {
    super();

    let endpoint =
      baseEndpoint +
      "/create-web-call?api_key=" +
      apiKey +
      "&agent_id=" +
      agentId +
      "&sample_rate=" +
      sampleRate;
    for (let param of agentPromptParams) {
      endpoint += "&agent_prompt_params=" + JSON.stringify(param);
    }
    this.ws = new WebSocket(endpoint);
    this.ws.binaryType = "arraybuffer";
  }

  waitForReady() {
    return new Promise<void>((resolve, reject) => {
      const onError = (error: any) => {
        reject(error); // Reject on error
      };
      this.ws.onerror = onError;

      const onClose = () => {
        reject("websocket closed before ready.");
      };
      this.ws.onclose = onClose;

      const onMessage = (event: any) => {
        try {
          const data = JSON.parse(event.data);
          if (data.status === "ready") {
            // Remove all registered listeners for cleaner future processing.
            this.ws.removeEventListener("error", onError);
            this.ws.removeEventListener("close", onClose);
            this.ws.removeEventListener("message", onMessage);
            // Emit audio
            this.ws.onmessage = (event) => {
              const audio: ArrayBuffer = event.data as ArrayBuffer;
              this.emit("audio", new Uint8Array(audio));
            };
            this.ws.onclose = (event) => {
              this.emit("close", event);
            };
            resolve(); // Resolve when the ready message is received
          }
        } catch (error) {
          // Handle JSON parsing error
          reject("malformed ready event.");
        }
      };
      this.ws.onmessage = onMessage;
    });
  }

  send(audio: Uint8Array) {
    if (this.ws.readyState === 1) this.ws.send(audio);
  }

  close() {
    this.ws.close();
  }
}

export function convertPCM16ToFloat32(array: Uint8Array): Float32Array {
  const targetArray = new Float32Array(array.byteLength / 2);

  // A DataView is used to read our 16-bit little-endian samples out of the Uint8Array buffer
  const sourceDataView = new DataView(array.buffer);

  // Loop through, get values, and divide by 32,768
  for (let i = 0; i < targetArray.length; i++) {
    targetArray[i] = sourceDataView.getInt16(i * 2, true) / Math.pow(2, 16 - 1);
  }
  return targetArray;
}

export function convertFloat32ToPCM16(array: Float32Array): Uint8Array {
  const buffer = new ArrayBuffer(array.length * 2);
  const view = new DataView(buffer);

  for (let i = 0; i < array.length; i++) {
    const value = array[i] * 32768;
    view.setInt16(i * 2, value, true); // true for little-endian
  }

  return new Uint8Array(buffer);
}

export class RetellClient {
  private sdkConfiguration: SDKConfiguration;

  constructor(props?: SDKProps) {
    let serverURL = props?.serverURL;
    const serverIdx = props?.serverIdx ?? 0;

    if (!serverURL) {
      serverURL = ServerList[serverIdx];
    }

    const defaultClient = props?.defaultClient ?? axios;
    this.sdkConfiguration = new SDKConfiguration({
      defaultClient: defaultClient,
      security: new components.Security({ apiKey: props?.apiKey }),

      serverURL: serverURL,
      retryConfig: props?.retryConfig,
    });
  }

  async createWebCall(
    apikey: string,
    agentId: string,
    sampleRate = 16000,
    agentPromptParams = [],
    websocketEndpoint: string = "wss://api.re-tell.ai"
  ): Promise<LiveClient> {
    const liveClient = new LiveClient(
      apikey,
      agentId,
      sampleRate,
      agentPromptParams,
      websocketEndpoint
    );
    await liveClient.waitForReady();
    return liveClient;
  }

  /**
   * Create a new agent
   */
  async createAgent(
    req: operations.CreateAgentRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateAgentResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreateAgentRequestBody(req);
    }

    const baseURL: string = utils.templateUrl(
      this.sdkConfiguration.serverURL,
      this.sdkConfiguration.serverDefaults
    );
    const operationUrl: string = baseURL.replace(/\/$/, "") + "/create-agent";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, null];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    const client: AxiosInstance = this.sdkConfiguration.defaultClient;
    let globalSecurity = this.sdkConfiguration.security;
    if (typeof globalSecurity === "function") {
      globalSecurity = await globalSecurity();
    }
    if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
      globalSecurity = new components.Security(globalSecurity);
    }
    const properties = utils.parseSecurityProperties(globalSecurity);
    const headers: RawAxiosRequestHeaders = {
      ...reqBodyHeaders,
      ...config?.headers,
      ...properties.headers,
    };
    if (reqBody == null) throw new Error("request body is required");
    headers["Accept"] = "application/json";

    const httpRes: AxiosResponse = await axios.request({
      validateStatus: () => true,
      url: operationUrl,
      method: "post",
      headers: headers,
      responseType: "arraybuffer",
      data: reqBody,
      ...config,
    });

    const responseContentType: string =
      httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.CreateAgentResponse =
      new operations.CreateAgentResponse({
        statusCode: httpRes.status,
        contentType: responseContentType,
        rawResponse: httpRes,
      });
    const decodedRes = new TextDecoder().decode(httpRes?.data);
    switch (true) {
      case httpRes?.status == 201:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          res.agent = utils.objectToClass(
            JSON.parse(decodedRes),
            components.Agent
          );
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 400:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.CreateAgentResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.CreateAgentResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 401:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.CreateAgentResponseResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.CreateAgentResponseResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.CreateAgentResponse422ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.CreateAgentResponse422ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case (httpRes?.status >= 400 && httpRes?.status < 500) ||
        (httpRes?.status >= 500 && httpRes?.status < 600):
        throw new errors.SDKError(
          "API error occurred",
          httpRes.status,
          decodedRes,
          httpRes
        );
      case httpRes?.status == 500:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.CreateAgentResponse500ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.CreateAgentResponse500ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
    }

    return res;
  }

  /**
   * Initiate an outbound phone call.
   */
  async createPhoneCall(
    req: operations.CreatePhoneCallRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.CreatePhoneCallResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreatePhoneCallRequestBody(req);
    }

    const baseURL: string = utils.templateUrl(
      this.sdkConfiguration.serverURL,
      this.sdkConfiguration.serverDefaults
    );
    const operationUrl: string =
      baseURL.replace(/\/$/, "") + "/create-phone-call";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, null];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    const client: AxiosInstance = this.sdkConfiguration.defaultClient;
    let globalSecurity = this.sdkConfiguration.security;
    if (typeof globalSecurity === "function") {
      globalSecurity = await globalSecurity();
    }
    if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
      globalSecurity = new components.Security(globalSecurity);
    }
    const properties = utils.parseSecurityProperties(globalSecurity);
    const headers: RawAxiosRequestHeaders = {
      ...reqBodyHeaders,
      ...config?.headers,
      ...properties.headers,
    };
    if (reqBody == null) throw new Error("request body is required");
    headers["Accept"] = "application/json";

    const httpRes: AxiosResponse = await axios.request({
      validateStatus: () => true,
      url: operationUrl,
      method: "post",
      headers: headers,
      responseType: "arraybuffer",
      data: reqBody,
      ...config,
    });

    const responseContentType: string =
      httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.CreatePhoneCallResponse =
      new operations.CreatePhoneCallResponse({
        statusCode: httpRes.status,
        contentType: responseContentType,
        rawResponse: httpRes,
      });
    const decodedRes = new TextDecoder().decode(httpRes?.data);
    switch (true) {
      case httpRes?.status == 201:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          res.object = utils.objectToClass(
            JSON.parse(decodedRes),
            operations.CreatePhoneCallResponseBody
          );
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 400:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.CreatePhoneCallResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.CreatePhoneCallResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 401:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.CreatePhoneCallResponseResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.CreatePhoneCallResponseResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 402:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.CreatePhoneCallResponse402ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.CreatePhoneCallResponse402ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.CreatePhoneCallResponse422ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.CreatePhoneCallResponse422ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 429:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.CreatePhoneCallResponse429ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.CreatePhoneCallResponse429ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case (httpRes?.status >= 400 && httpRes?.status < 500) ||
        (httpRes?.status >= 500 && httpRes?.status < 600):
        throw new errors.SDKError(
          "API error occurred",
          httpRes.status,
          decodedRes,
          httpRes
        );
      case httpRes?.status == 500:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.CreatePhoneCallResponse500ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.CreatePhoneCallResponse500ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
    }

    return res;
  }

  /**
   * Create a new phone number
   */
  async createPhoneNumber(
    req: operations.CreatePhoneNumberRequestBody,
    config?: AxiosRequestConfig
  ): Promise<operations.CreatePhoneNumberResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.CreatePhoneNumberRequestBody(req);
    }

    const baseURL: string = utils.templateUrl(
      this.sdkConfiguration.serverURL,
      this.sdkConfiguration.serverDefaults
    );
    const operationUrl: string =
      baseURL.replace(/\/$/, "") + "/create-phone-number";

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, null];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "request",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    const client: AxiosInstance = this.sdkConfiguration.defaultClient;
    let globalSecurity = this.sdkConfiguration.security;
    if (typeof globalSecurity === "function") {
      globalSecurity = await globalSecurity();
    }
    if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
      globalSecurity = new components.Security(globalSecurity);
    }
    const properties = utils.parseSecurityProperties(globalSecurity);
    const headers: RawAxiosRequestHeaders = {
      ...reqBodyHeaders,
      ...config?.headers,
      ...properties.headers,
    };
    if (reqBody == null) throw new Error("request body is required");
    headers["Accept"] = "application/json";

    const httpRes: AxiosResponse = await axios.request({
      validateStatus: () => true,
      url: operationUrl,
      method: "post",
      headers: headers,
      responseType: "arraybuffer",
      data: reqBody,
      ...config,
    });

    const responseContentType: string =
      httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.CreatePhoneNumberResponse =
      new operations.CreatePhoneNumberResponse({
        statusCode: httpRes.status,
        contentType: responseContentType,
        rawResponse: httpRes,
      });
    const decodedRes = new TextDecoder().decode(httpRes?.data);
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          res.phoneNumber = utils.objectToClass(
            JSON.parse(decodedRes),
            components.PhoneNumber
          );
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 400:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.CreatePhoneNumberResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.CreatePhoneNumberResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 401:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.CreatePhoneNumberResponseResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.CreatePhoneNumberResponseResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 402:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.CreatePhoneNumberResponse402ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.CreatePhoneNumberResponse402ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.CreatePhoneNumberResponse422ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.CreatePhoneNumberResponse422ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case (httpRes?.status >= 400 && httpRes?.status < 500) ||
        (httpRes?.status >= 500 && httpRes?.status < 600):
        throw new errors.SDKError(
          "API error occurred",
          httpRes.status,
          decodedRes,
          httpRes
        );
      case httpRes?.status == 500:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.CreatePhoneNumberResponse500ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.CreatePhoneNumberResponse500ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
    }

    return res;
  }

  /**
   * Delete an existing agent
   */
  async deleteAgent(
    agentId: string,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteAgentResponse> {
    const req = new operations.DeleteAgentRequest({
      agentId: agentId,
    });
    const baseURL: string = utils.templateUrl(
      this.sdkConfiguration.serverURL,
      this.sdkConfiguration.serverDefaults
    );
    const operationUrl: string = utils.generateURL(
      baseURL,
      "/delete-agent/{agent_id}",
      req
    );
    const client: AxiosInstance = this.sdkConfiguration.defaultClient;
    let globalSecurity = this.sdkConfiguration.security;
    if (typeof globalSecurity === "function") {
      globalSecurity = await globalSecurity();
    }
    if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
      globalSecurity = new components.Security(globalSecurity);
    }
    const properties = utils.parseSecurityProperties(globalSecurity);
    const headers: RawAxiosRequestHeaders = {
      ...config?.headers,
      ...properties.headers,
    };
    headers["Accept"] = "application/json";

    const httpRes: AxiosResponse = await axios.request({
      validateStatus: () => true,
      url: operationUrl,
      method: "delete",
      headers: headers,
      responseType: "arraybuffer",
      ...config,
    });

    const responseContentType: string =
      httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.DeleteAgentResponse =
      new operations.DeleteAgentResponse({
        statusCode: httpRes.status,
        contentType: responseContentType,
        rawResponse: httpRes,
      });
    const decodedRes = new TextDecoder().decode(httpRes?.data);
    switch (true) {
      case httpRes?.status == 204:
        break;
      case httpRes?.status == 400:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.DeleteAgentResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.DeleteAgentResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 401:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.DeleteAgentResponseResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.DeleteAgentResponseResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.DeleteAgentResponse422ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.DeleteAgentResponse422ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case (httpRes?.status >= 400 && httpRes?.status < 500) ||
        (httpRes?.status >= 500 && httpRes?.status < 600):
        throw new errors.SDKError(
          "API error occurred",
          httpRes.status,
          decodedRes,
          httpRes
        );
      case httpRes?.status == 500:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.DeleteAgentResponse500ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.DeleteAgentResponse500ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
    }

    return res;
  }

  /**
   * Delete a specific phone number
   */
  async deletePhoneNumber(
    phoneNumber: string,
    config?: AxiosRequestConfig
  ): Promise<operations.DeletePhoneNumberResponse> {
    const req = new operations.DeletePhoneNumberRequest({
      phoneNumber: phoneNumber,
    });
    const baseURL: string = utils.templateUrl(
      this.sdkConfiguration.serverURL,
      this.sdkConfiguration.serverDefaults
    );
    const operationUrl: string = utils.generateURL(
      baseURL,
      "/delete-phone-number/{phone_number}",
      req
    );
    const client: AxiosInstance = this.sdkConfiguration.defaultClient;
    let globalSecurity = this.sdkConfiguration.security;
    if (typeof globalSecurity === "function") {
      globalSecurity = await globalSecurity();
    }
    if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
      globalSecurity = new components.Security(globalSecurity);
    }
    const properties = utils.parseSecurityProperties(globalSecurity);
    const headers: RawAxiosRequestHeaders = {
      ...config?.headers,
      ...properties.headers,
    };
    headers["Accept"] = "application/json";

    const httpRes: AxiosResponse = await axios.request({
      validateStatus: () => true,
      url: operationUrl,
      method: "delete",
      headers: headers,
      responseType: "arraybuffer",
      ...config,
    });

    const responseContentType: string =
      httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.DeletePhoneNumberResponse =
      new operations.DeletePhoneNumberResponse({
        statusCode: httpRes.status,
        contentType: responseContentType,
        rawResponse: httpRes,
      });
    const decodedRes = new TextDecoder().decode(httpRes?.data);
    switch (true) {
      case httpRes?.status == 204:
        break;
      case httpRes?.status == 400:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.DeletePhoneNumberResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.DeletePhoneNumberResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 401:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.DeletePhoneNumberResponseResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.DeletePhoneNumberResponseResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.DeletePhoneNumberResponse422ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.DeletePhoneNumberResponse422ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case (httpRes?.status >= 400 && httpRes?.status < 500) ||
        (httpRes?.status >= 500 && httpRes?.status < 600):
        throw new errors.SDKError(
          "API error occurred",
          httpRes.status,
          decodedRes,
          httpRes
        );
      case httpRes?.status == 500:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.DeletePhoneNumberResponse500ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.DeletePhoneNumberResponse500ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
    }

    return res;
  }

  /**
   * Retrieve details of a specific agent
   */
  async getAgent(
    agentId: string,
    config?: AxiosRequestConfig
  ): Promise<operations.GetAgentResponse> {
    const req = new operations.GetAgentRequest({
      agentId: agentId,
    });
    const baseURL: string = utils.templateUrl(
      this.sdkConfiguration.serverURL,
      this.sdkConfiguration.serverDefaults
    );
    const operationUrl: string = utils.generateURL(
      baseURL,
      "/get-agent/{agent_id}",
      req
    );
    const client: AxiosInstance = this.sdkConfiguration.defaultClient;
    let globalSecurity = this.sdkConfiguration.security;
    if (typeof globalSecurity === "function") {
      globalSecurity = await globalSecurity();
    }
    if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
      globalSecurity = new components.Security(globalSecurity);
    }
    const properties = utils.parseSecurityProperties(globalSecurity);
    const headers: RawAxiosRequestHeaders = {
      ...config?.headers,
      ...properties.headers,
    };
    headers["Accept"] = "application/json";

    const httpRes: AxiosResponse = await axios.request({
      validateStatus: () => true,
      url: operationUrl,
      method: "get",
      headers: headers,
      responseType: "arraybuffer",
      ...config,
    });

    const responseContentType: string =
      httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.GetAgentResponse = new operations.GetAgentResponse({
      statusCode: httpRes.status,
      contentType: responseContentType,
      rawResponse: httpRes,
    });
    const decodedRes = new TextDecoder().decode(httpRes?.data);
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          res.agent = utils.objectToClass(
            JSON.parse(decodedRes),
            components.Agent
          );
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 400:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.GetAgentResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.GetAgentResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 401:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.GetAgentResponseResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.GetAgentResponseResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.GetAgentResponse422ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.GetAgentResponse422ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case (httpRes?.status >= 400 && httpRes?.status < 500) ||
        (httpRes?.status >= 500 && httpRes?.status < 600):
        throw new errors.SDKError(
          "API error occurred",
          httpRes.status,
          decodedRes,
          httpRes
        );
      case httpRes?.status == 500:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.GetAgentResponse500ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.GetAgentResponse500ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
    }

    return res;
  }

  /**
   * Retrieve details of a specific call
   */
  async getCall(
    callId: string,
    config?: AxiosRequestConfig
  ): Promise<operations.GetCallResponse> {
    const req = new operations.GetCallRequest({
      callId: callId,
    });
    const baseURL: string = utils.templateUrl(
      this.sdkConfiguration.serverURL,
      this.sdkConfiguration.serverDefaults
    );
    const operationUrl: string = utils.generateURL(
      baseURL,
      "/get-call/{call_id}",
      req
    );
    const client: AxiosInstance = this.sdkConfiguration.defaultClient;
    let globalSecurity = this.sdkConfiguration.security;
    if (typeof globalSecurity === "function") {
      globalSecurity = await globalSecurity();
    }
    if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
      globalSecurity = new components.Security(globalSecurity);
    }
    const properties = utils.parseSecurityProperties(globalSecurity);
    const headers: RawAxiosRequestHeaders = {
      ...config?.headers,
      ...properties.headers,
    };
    headers["Accept"] = "application/json";

    const httpRes: AxiosResponse = await axios.request({
      validateStatus: () => true,
      url: operationUrl,
      method: "get",
      headers: headers,
      responseType: "arraybuffer",
      ...config,
    });

    const responseContentType: string =
      httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.GetCallResponse = new operations.GetCallResponse({
      statusCode: httpRes.status,
      contentType: responseContentType,
      rawResponse: httpRes,
    });
    const decodedRes = new TextDecoder().decode(httpRes?.data);
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          res.callDetail = utils.objectToClass(
            JSON.parse(decodedRes),
            components.CallDetail
          );
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 400:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.GetCallResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.GetCallResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 401:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.GetCallResponseResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.GetCallResponseResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.GetCallResponse422ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.GetCallResponse422ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case (httpRes?.status >= 400 && httpRes?.status < 500) ||
        (httpRes?.status >= 500 && httpRes?.status < 600):
        throw new errors.SDKError(
          "API error occurred",
          httpRes.status,
          decodedRes,
          httpRes
        );
      case httpRes?.status == 500:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.GetCallResponse500ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.GetCallResponse500ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
    }

    return res;
  }

  /**
   * Retrieve info about a specific number
   */
  async getPhoneNumber(
    phoneNumber: string,
    config?: AxiosRequestConfig
  ): Promise<operations.GetPhoneNumberResponse> {
    const req = new operations.GetPhoneNumberRequest({
      phoneNumber: phoneNumber,
    });
    const baseURL: string = utils.templateUrl(
      this.sdkConfiguration.serverURL,
      this.sdkConfiguration.serverDefaults
    );
    const operationUrl: string = utils.generateURL(
      baseURL,
      "/get-phone-number/{phone_number}",
      req
    );
    const client: AxiosInstance = this.sdkConfiguration.defaultClient;
    let globalSecurity = this.sdkConfiguration.security;
    if (typeof globalSecurity === "function") {
      globalSecurity = await globalSecurity();
    }
    if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
      globalSecurity = new components.Security(globalSecurity);
    }
    const properties = utils.parseSecurityProperties(globalSecurity);
    const headers: RawAxiosRequestHeaders = {
      ...config?.headers,
      ...properties.headers,
    };
    headers["Accept"] = "application/json";

    const httpRes: AxiosResponse = await axios.request({
      validateStatus: () => true,
      url: operationUrl,
      method: "get",
      headers: headers,
      responseType: "arraybuffer",
      ...config,
    });

    const responseContentType: string =
      httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.GetPhoneNumberResponse =
      new operations.GetPhoneNumberResponse({
        statusCode: httpRes.status,
        contentType: responseContentType,
        rawResponse: httpRes,
      });
    const decodedRes = new TextDecoder().decode(httpRes?.data);
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          res.phoneNumber = utils.objectToClass(
            JSON.parse(decodedRes),
            components.PhoneNumber
          );
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 400:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.GetPhoneNumberResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.GetPhoneNumberResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 401:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.GetPhoneNumberResponseResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.GetPhoneNumberResponseResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.GetPhoneNumberResponse422ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.GetPhoneNumberResponse422ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case (httpRes?.status >= 400 && httpRes?.status < 500) ||
        (httpRes?.status >= 500 && httpRes?.status < 600):
        throw new errors.SDKError(
          "API error occurred",
          httpRes.status,
          decodedRes,
          httpRes
        );
      case httpRes?.status == 500:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.GetPhoneNumberResponse500ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.GetPhoneNumberResponse500ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
    }

    return res;
  }

  /**
   * List all agents
   */
  async listAgents(
    config?: AxiosRequestConfig
  ): Promise<operations.ListAgentsResponse> {
    const baseURL: string = utils.templateUrl(
      this.sdkConfiguration.serverURL,
      this.sdkConfiguration.serverDefaults
    );
    const operationUrl: string = baseURL.replace(/\/$/, "") + "/list-agents";
    const client: AxiosInstance = this.sdkConfiguration.defaultClient;
    let globalSecurity = this.sdkConfiguration.security;
    if (typeof globalSecurity === "function") {
      globalSecurity = await globalSecurity();
    }
    if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
      globalSecurity = new components.Security(globalSecurity);
    }
    const properties = utils.parseSecurityProperties(globalSecurity);
    const headers: RawAxiosRequestHeaders = {
      ...config?.headers,
      ...properties.headers,
    };
    headers["Accept"] = "application/json";

    const httpRes: AxiosResponse = await axios.request({
      validateStatus: () => true,
      url: operationUrl,
      method: "get",
      headers: headers,
      responseType: "arraybuffer",
      ...config,
    });

    const responseContentType: string =
      httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ListAgentsResponse =
      new operations.ListAgentsResponse({
        statusCode: httpRes.status,
        contentType: responseContentType,
        rawResponse: httpRes,
      });
    const decodedRes = new TextDecoder().decode(httpRes?.data);
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          res.classes = [];
          const resFieldDepth: number = utils.getResFieldDepth(res);
          res.classes = utils.objectToClass(
            JSON.parse(decodedRes),
            components.Agent,
            resFieldDepth
          );
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 401:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.ListAgentsResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.ListAgentsResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case (httpRes?.status >= 400 && httpRes?.status < 500) ||
        (httpRes?.status >= 500 && httpRes?.status < 600):
        throw new errors.SDKError(
          "API error occurred",
          httpRes.status,
          decodedRes,
          httpRes
        );
      case httpRes?.status == 500:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.ListAgentsResponseResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.ListAgentsResponseResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
    }

    return res;
  }

  /**
   * Retrieve call details
   */
  async listCalls(
    filterCriteria?: operations.FilterCriteria,
    limit?: number,
    sortOrder?: operations.SortOrder,
    config?: AxiosRequestConfig
  ): Promise<operations.ListCallsResponse> {
    const req = new operations.ListCallsRequest({
      filterCriteria: filterCriteria,
      limit: limit,
      sortOrder: sortOrder,
    });
    const baseURL: string = utils.templateUrl(
      this.sdkConfiguration.serverURL,
      this.sdkConfiguration.serverDefaults
    );
    const operationUrl: string = baseURL.replace(/\/$/, "") + "/list-calls";
    const client: AxiosInstance = this.sdkConfiguration.defaultClient;
    let globalSecurity = this.sdkConfiguration.security;
    if (typeof globalSecurity === "function") {
      globalSecurity = await globalSecurity();
    }
    if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
      globalSecurity = new components.Security(globalSecurity);
    }
    const properties = utils.parseSecurityProperties(globalSecurity);
    const headers: RawAxiosRequestHeaders = {
      ...config?.headers,
      ...properties.headers,
    };
    const queryParams: string = utils.serializeQueryParams(req);
    headers["Accept"] = "application/json";

    const httpRes: AxiosResponse = await axios.request({
      validateStatus: () => true,
      url: operationUrl + queryParams,
      method: "get",
      headers: headers,
      responseType: "arraybuffer",
      ...config,
    });

    const responseContentType: string =
      httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ListCallsResponse = new operations.ListCallsResponse({
      statusCode: httpRes.status,
      contentType: responseContentType,
      rawResponse: httpRes,
    });
    const decodedRes = new TextDecoder().decode(httpRes?.data);
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          res.classes = [];
          const resFieldDepth: number = utils.getResFieldDepth(res);
          res.classes = utils.objectToClass(
            JSON.parse(decodedRes),
            components.CallDetail,
            resFieldDepth
          );
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 400:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.ListCallsResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.ListCallsResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 401:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.ListCallsResponseResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.ListCallsResponseResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case (httpRes?.status >= 400 && httpRes?.status < 500) ||
        (httpRes?.status >= 500 && httpRes?.status < 600):
        throw new errors.SDKError(
          "API error occurred",
          httpRes.status,
          decodedRes,
          httpRes
        );
      case httpRes?.status == 500:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.ListCallsResponse500ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.ListCallsResponse500ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
    }

    return res;
  }

  /**
   * List all purchased and active phone numbers
   */
  async listPhoneNumbers(
    config?: AxiosRequestConfig
  ): Promise<operations.ListPhoneNumbersResponse> {
    const baseURL: string = utils.templateUrl(
      this.sdkConfiguration.serverURL,
      this.sdkConfiguration.serverDefaults
    );
    const operationUrl: string =
      baseURL.replace(/\/$/, "") + "/list-phone-numbers";
    const client: AxiosInstance = this.sdkConfiguration.defaultClient;
    let globalSecurity = this.sdkConfiguration.security;
    if (typeof globalSecurity === "function") {
      globalSecurity = await globalSecurity();
    }
    if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
      globalSecurity = new components.Security(globalSecurity);
    }
    const properties = utils.parseSecurityProperties(globalSecurity);
    const headers: RawAxiosRequestHeaders = {
      ...config?.headers,
      ...properties.headers,
    };
    headers["Accept"] = "application/json";

    const httpRes: AxiosResponse = await axios.request({
      validateStatus: () => true,
      url: operationUrl,
      method: "get",
      headers: headers,
      responseType: "arraybuffer",
      ...config,
    });

    const responseContentType: string =
      httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ListPhoneNumbersResponse =
      new operations.ListPhoneNumbersResponse({
        statusCode: httpRes.status,
        contentType: responseContentType,
        rawResponse: httpRes,
      });
    const decodedRes = new TextDecoder().decode(httpRes?.data);
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          res.classes = [];
          const resFieldDepth: number = utils.getResFieldDepth(res);
          res.classes = utils.objectToClass(
            JSON.parse(decodedRes),
            components.PhoneNumber,
            resFieldDepth
          );
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 400:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.ListPhoneNumbersResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.ListPhoneNumbersResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 401:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.ListPhoneNumbersResponseResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.ListPhoneNumbersResponseResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case (httpRes?.status >= 400 && httpRes?.status < 500) ||
        (httpRes?.status >= 500 && httpRes?.status < 600):
        throw new errors.SDKError(
          "API error occurred",
          httpRes.status,
          decodedRes,
          httpRes
        );
      case httpRes?.status == 500:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.ListPhoneNumbersResponse500ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.ListPhoneNumbersResponse500ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
    }

    return res;
  }

  /**
   * Update an existing agent
   */
  async updateAgent(
    agentNoDefaultNoRequired: components.AgentNoDefaultNoRequired,
    agentId: string,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateAgentResponse> {
    const req = new operations.UpdateAgentRequest({
      agentNoDefaultNoRequired: agentNoDefaultNoRequired,
      agentId: agentId,
    });
    const baseURL: string = utils.templateUrl(
      this.sdkConfiguration.serverURL,
      this.sdkConfiguration.serverDefaults
    );
    const operationUrl: string = utils.generateURL(
      baseURL,
      "/update-agent/{agent_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, null];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "agentNoDefaultNoRequired",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    const client: AxiosInstance = this.sdkConfiguration.defaultClient;
    let globalSecurity = this.sdkConfiguration.security;
    if (typeof globalSecurity === "function") {
      globalSecurity = await globalSecurity();
    }
    if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
      globalSecurity = new components.Security(globalSecurity);
    }
    const properties = utils.parseSecurityProperties(globalSecurity);
    const headers: RawAxiosRequestHeaders = {
      ...reqBodyHeaders,
      ...config?.headers,
      ...properties.headers,
    };
    if (reqBody == null) throw new Error("request body is required");
    headers["Accept"] = "application/json";

    const httpRes: AxiosResponse = await axios.request({
      validateStatus: () => true,
      url: operationUrl,
      method: "patch",
      headers: headers,
      responseType: "arraybuffer",
      data: reqBody,
      ...config,
    });

    const responseContentType: string =
      httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.UpdateAgentResponse =
      new operations.UpdateAgentResponse({
        statusCode: httpRes.status,
        contentType: responseContentType,
        rawResponse: httpRes,
      });
    const decodedRes = new TextDecoder().decode(httpRes?.data);
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          res.agent = utils.objectToClass(
            JSON.parse(decodedRes),
            components.Agent
          );
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 400:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.UpdateAgentResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.UpdateAgentResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 401:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.UpdateAgentResponseResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.UpdateAgentResponseResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.UpdateAgentResponse422ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.UpdateAgentResponse422ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case (httpRes?.status >= 400 && httpRes?.status < 500) ||
        (httpRes?.status >= 500 && httpRes?.status < 600):
        throw new errors.SDKError(
          "API error occurred",
          httpRes.status,
          decodedRes,
          httpRes
        );
      case httpRes?.status == 500:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.UpdateAgentResponse500ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.UpdateAgentResponse500ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
    }

    return res;
  }

  /**
   * Update an existing phone number
   */
  async updatePhoneAgent(
    requestBody: operations.UpdatePhoneAgentRequestBody,
    phoneNumber: string,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdatePhoneAgentResponse> {
    const req = new operations.UpdatePhoneAgentRequest({
      requestBody: requestBody,
      phoneNumber: phoneNumber,
    });
    const baseURL: string = utils.templateUrl(
      this.sdkConfiguration.serverURL,
      this.sdkConfiguration.serverDefaults
    );
    const operationUrl: string = utils.generateURL(
      baseURL,
      "/update-phone-agent/{phone_number}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, null];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }
    const client: AxiosInstance = this.sdkConfiguration.defaultClient;
    let globalSecurity = this.sdkConfiguration.security;
    if (typeof globalSecurity === "function") {
      globalSecurity = await globalSecurity();
    }
    if (!(globalSecurity instanceof utils.SpeakeasyBase)) {
      globalSecurity = new components.Security(globalSecurity);
    }
    const properties = utils.parseSecurityProperties(globalSecurity);
    const headers: RawAxiosRequestHeaders = {
      ...reqBodyHeaders,
      ...config?.headers,
      ...properties.headers,
    };
    if (reqBody == null) throw new Error("request body is required");
    headers["Accept"] = "application/json";

    const httpRes: AxiosResponse = await axios.request({
      validateStatus: () => true,
      url: operationUrl,
      method: "patch",
      headers: headers,
      responseType: "arraybuffer",
      data: reqBody,
      ...config,
    });

    const responseContentType: string =
      httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.UpdatePhoneAgentResponse =
      new operations.UpdatePhoneAgentResponse({
        statusCode: httpRes.status,
        contentType: responseContentType,
        rawResponse: httpRes,
      });
    const decodedRes = new TextDecoder().decode(httpRes?.data);
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          res.phoneNumber = utils.objectToClass(
            JSON.parse(decodedRes),
            components.PhoneNumber
          );
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 400:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.UpdatePhoneAgentResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.UpdatePhoneAgentResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 401:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.UpdatePhoneAgentResponseResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.UpdatePhoneAgentResponseResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.UpdatePhoneAgentResponse422ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.UpdatePhoneAgentResponse422ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
      case (httpRes?.status >= 400 && httpRes?.status < 500) ||
        (httpRes?.status >= 500 && httpRes?.status < 600):
        throw new errors.SDKError(
          "API error occurred",
          httpRes.status,
          decodedRes,
          httpRes
        );
      case httpRes?.status == 500:
        if (utils.matchContentType(responseContentType, `application/json`)) {
          const err = utils.objectToClass(
            JSON.parse(decodedRes),
            errors.UpdatePhoneAgentResponse500ResponseBody
          );
          err.rawResponse = httpRes;
          throw new errors.UpdatePhoneAgentResponse500ResponseBody(err);
        } else {
          throw new errors.SDKError(
            "unknown content-type received: " + responseContentType,
            httpRes.status,
            decodedRes,
            httpRes
          );
        }
        break;
    }

    return res;
  }
}
